@page "/add-element"
@inject HttpClient HttpClient
@using TechnicalInsulation.Enums
@using TechnicalInsulation.Models.Dtos
@using TechnicalInsulation.Models.Elements

@rendermode InteractiveServer

<PageTitle>Add Element</PageTitle>
<EditForm Model="@_dto" OnValidSubmit="Save">
    <DataAnnotationsValidator />

    <div class="add row">
        <h1>Adding Insulated Element</h1>
        <h2>Basic Data</h2>
        <div class="form-group col-md-3">
            <label for="Drawing">Drawing</label>
            <input id="Drawing" name="Drawing" type="text" class="form-control" @bind="_dto.Drawing"/>
            <ValidationMessage For="@(() => _dto.Drawing)" />
        </div>

        <div class="form-group col-md-2">
            <label for="Number">Element number</label>
            <input id="Number" name="ElementNumber" type="text" class="form-control" @bind="_dto.Number"/>
            <ValidationMessage For="@(() => _dto.Number)" />
        </div>

        <div class="form-group col-md-2">
            <label for="Temperature">Temperature</label>
            <input id="Temperature" name="Temperature" type="text" class="form-control" @bind="_dto.Temperature"/>
            <ValidationMessage For="@(() => _dto.Temperature)" />
        </div>
        <div class="form-group col-md-2">
            <label for="Length">Length</label>
            <input id="Length" name="Length" type="text" class="form-control" @bind="_dto.Length"/>
            <ValidationMessage For="@(() => _dto.Length)" />
        </div>
    </div>

    <div class="add row">
        <h2>Element Type Selection</h2>
        <div class="form-group col-md-3">
            <label for="ElementType">Element type</label>
            <select id="ElementType" class="form-control" @bind="_dto.SelectedElementType">
                <option value=""></option>
                @foreach (var elementType in _data.ElementTypes)
                {
                    <option value="@elementType">@elementType</option>
                }
            </select>
            <ValidationMessage For="@(() => _dto.SelectedElementType)" />
        </div>
    
        @if (_dto.SelectedElementType == nameof(Duct))
        {
            <div class="form-group col-md-2">
                <label for="DuctType">Duct type</label>
                <select id="DuctType" class="form-control" @bind="_dto.SelectedDuctType">
                    <option value=""></option>
                    @foreach (var type in _data.DuctTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <ValidationMessage For="@(() => _dto.SelectedDuctType)" />

            </div>
            @if (_dto.SelectedDuctType == DuctType.Round.ToString())
            {
                <div class="form-group col-md-2">
                    <label for="FirstDimension">Radius</label>
                    <input id="FirstDimension" name="FirstDimension" type="text" class="form-control" @bind="_dto.FirstDimension"/>
                    <ValidationMessage For="@(() => _dto.FirstDimension)" />
                </div>
            }
        
            @if (_dto.SelectedDuctType == DuctType.Rectangular.ToString())
            {
                <div class="form-group col-md-2">
                    <label for="FirstDimension">Width</label>
                    <input id="FirstDimension" name="FirstDimension" type="text" class="form-control" @bind="_dto.FirstDimension"/>
                    <ValidationMessage For="@(() => _dto.FirstDimension)" />
                </div>
                <div class="form-group col-md-2">
                    <label for="SecondDimension">Height</label>
                    <input id="SecondDimension" name="SecondDimension" type="text" class="form-control" @bind="_dto.SecondDimension"/>
                    <ValidationMessage For="@(() => _dto.SecondDimension)" />
                </div>
            }
        }

        @if (_dto.SelectedElementType == nameof(Pipeline))
        {
            <div class="form-group col-md-2">
                <label for="PipelineType">Pipeline shape</label>
                <select id="PipelineType" class="form-control" @bind="_dto.SelectedPipelineType">
                    <option value=""></option>
                    @foreach (var type in _data.PipelineTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <ValidationMessage For="@(() => _dto.SelectedPipelineType)" />
            </div>
            <div class="form-group col-md-2">
                <label for="FirstDimension">Nominal Diameter</label>
                <input id="FirstDimension" name="FirstDimension" type="text" class="form-control" @bind="_dto.FirstDimension"/>
                <ValidationMessage For="@(() => _dto.FirstDimension)" />
            </div>
            @if(_dto.SelectedPipelineType == PipelineTypeEnum.Reduction.ToString() || _dto.SelectedPipelineType == PipelineTypeEnum.Tee.ToString())
            {
                <div class="form-group col-md-2">
                    <label for="SecondDimension">Secondary Diameter</label>
                    <input id="SecondDimension" name="SecondDimension" type="text" class="form-control" @bind="_dto.SecondDimension"/>
                </div>
                <ValidationMessage For="@(() => _dto.SecondDimension)" />
            }
            @if (_dto.SelectedPipelineType == PipelineTypeEnum.Elbow.ToString())
            {
                <div class="form-group col-md-2">
                    <label for="Angle">Angle</label>
                    <input id="Angle" name="Angle" type="text" class="form-control" @bind="_dto.Angle"/>
                </div>
                <ValidationMessage For="@(() => _dto.Angle)" />
            }
        }

        @if (_dto.SelectedElementType == nameof(Vessel))
        {
            <div class="form-group col-md-2">
                <label for="FirstDimension">Radius</label>
                <input id="FirstDimension" name="FirstDimension" type="text" class="form-control" @bind="_dto.FirstDimension"/>
                <ValidationMessage For="@(() => _dto.FirstDimension)" />
            </div>
            <div class="form-group col-md-2">
                <label for="VesselBottomType">First vessel bottom</label>
                <select id="VesselBottomType" class="form-control" @bind="_dto.SelectedVesselBottomType1">
                    <option value=""></option>
                    @foreach (var type in _data.VesselBottomTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
                <ValidationMessage For="@(() => _dto.SelectedVesselBottomType1)" />
            </div>
            <div class="form-group col-md-2">
                <label for="VesselBottomType">Second vessel bottom</label>
                <select id="VesselBottomType" class="form-control" @bind="_dto.SelectedVesselBottomType2">
                    <option value="None">None</option>
                    @foreach (var type in _data.VesselBottomTypes)
                    {
                        <option value="@type">@type</option>
                    }
                </select>
            </div>
        }
        <div class = "row justify-content-end">
            <button class="btn btn-primary col-md-1" type="submit">Save</button>
        </div>
    </div>
</EditForm>

@if (_showConfirmationModal)
{
<div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Confirmation</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseConfirmationModal"></button>
            </div>
            <div class="modal-body">
                <p>Element saved successfully!</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="CloseConfirmationModal">OK</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}

@if (_showErrorModal)
{
<div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="btn-close" aria-label="Close" @onclick="CloseErrorModal"></button>
            </div>
            <div class="modal-body">
                <p>@_errorMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick="CloseErrorModal">OK</button>
            </div>
        </div>
    </div>
</div>
<div class="modal-backdrop fade show"></div>
}

@code {
    private AddElementDto _dto = new ();
    private AddElementViewData _data = new ();
    private const int ScopeId = 2;
    private bool _showConfirmationModal;
    private bool _showErrorModal;
    private string _errorMessage = null!;
    
    protected override async Task OnInitializedAsync()
    {
        HttpClient.BaseAddress = new Uri("http://localhost:5062");
        await LoadViewData();
    }

    private async Task LoadViewData()
    {
        try
        {
            var response = await HttpClient.GetFromJsonAsync<AddElementViewData>($"{ScopeId}/add-element/load-view-data");
            _data = response ?? throw new NullReferenceException("Loading add element view data failed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading element types: {ex.Message}");
        }
    }

    private async Task Save()
    {
        try
        {
            var response = await HttpClient.PostAsJsonAsync($"{ScopeId}/add-element/save", _dto);
            if (response.IsSuccessStatusCode == false)
            {
                throw new Exception(await response.Content.ReadAsStringAsync());
            }
            response.EnsureSuccessStatusCode();
            _showConfirmationModal = true;
        }
        catch (Exception ex)
        {
            _errorMessage = $"{ex.Message}";
            _showErrorModal = true;
            Console.WriteLine(_errorMessage);
        }
    }

    private void CloseConfirmationModal()
    {
        _showConfirmationModal = false;
        _dto = new AddElementDto();
    }
    
    private void CloseErrorModal()
    {
        _showErrorModal = false;
    }
}